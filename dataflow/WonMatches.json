{
	"name": "WonMatches",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MatchCSV",
						"type": "DatasetReference"
					},
					"name": "Match"
				},
				{
					"dataset": {
						"referenceName": "MatchResultCSV",
						"type": "DatasetReference"
					},
					"name": "MatchResult"
				},
				{
					"dataset": {
						"referenceName": "InningScoreCardCSV",
						"type": "DatasetReference"
					},
					"name": "InningScoreCardCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "overwritefile",
						"type": "DatasetReference"
					},
					"name": "Won1stBattingCSV"
				}
			],
			"transformations": [
				{
					"name": "MatchJoinMatchResult"
				},
				{
					"name": "JoinMatchMatchresultInningScoreCard"
				},
				{
					"name": "Won"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MatchID as string,",
				"          Season as string,",
				"          MatchDate as string,",
				"          Team1ID as string,",
				"          Team2ID as string,",
				"          PlayerOfMatchID as string,",
				"          City as string,",
				"          Venue as string,",
				"          DLMethodApplied as string,",
				"          TossWinningTeamID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Match",
				"source(output(",
				"          MatchID as string,",
				"          TeamID as string,",
				"          Result as string,",
				"          Runs as string,",
				"          Wickets as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MatchResult",
				"source(output(",
				"          MatchID as string,",
				"          InningID as string,",
				"          BattingTeamID as string,",
				"          BowlingTeamID as string,",
				"          Score as string,",
				"          Wickets as string,",
				"          Balls as string,",
				"          Wides as string,",
				"          NoBalls as string,",
				"          LegByes as string,",
				"          Byes as string,",
				"          OtherExtras as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> InningScoreCardCSV",
				"Match, MatchResult join(Match@MatchID == MatchResult@MatchID",
				"     && TossWinningTeamID == TeamID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MatchJoinMatchResult",
				"MatchJoinMatchResult, InningScoreCardCSV join(TossWinningTeamID == BattingTeamID",
				"     && Match@MatchID == InningScoreCardCSV@MatchID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMatchMatchresultInningScoreCard",
				"JoinMatchMatchresultInningScoreCard filter(Result=='WON') ~> Won",
				"Won select(mapColumn(",
				"          MatchID = Match@MatchID,",
				"          Season,",
				"          TeamID,",
				"          Result,",
				"          Runs,",
				"          MatchID = InningScoreCardCSV@MatchID,",
				"          InningID,",
				"          BattingTeamID,",
				"          BowlingTeamID,",
				"          Score",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns keyGenerate(output(Identity as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MatchID as string,",
				"          Season as string,",
				"          TeamID as string,",
				"          Result as string,",
				"          Runs as string,",
				"          InningID as string,",
				"          BattingTeamID as string,",
				"          BowlingTeamID as string,",
				"          Score as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Won1stBattingCSV"
			]
		}
	}
}